{
  "address": "0xda6f7e8f8b037A6Bd52c5A44A557933409EcF5Ff",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_allowedStableCoins",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_startingTime",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_pWallet",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "r1HardCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r2HardCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r3HardCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct PresaleVault.RoundHardCapInfo",
          "name": "_capInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "presale1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "presale2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "presale3",
              "type": "uint256"
            }
          ],
          "internalType": "struct PresaleVault.TokenPriceInUSD",
          "name": "_price",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyEnabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountNotAvailableForSale",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimNotEnabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DelayNotOver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Invalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeedGreaterThanCurrent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoAmountToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotStarted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Round3NotFinished",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RoundAlreadyStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RoundNotMatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SCNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountclaimed",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "TokenClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountPaidInUSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "purchaser",
          "type": "address"
        }
      ],
      "name": "TokenPurchased",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_coins",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_status",
          "type": "bool[]"
        }
      ],
      "name": "addAllowedStableCoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PresaleVault.PaymentType",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amountToPay",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClaimPercentages",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "presale1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "presale2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "presale3",
              "type": "uint256"
            }
          ],
          "internalType": "struct PresaleVault.ClaimPercentages",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClaimStartAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getIsAllowedStableCoin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinDaysBetweenClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPresaleInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "raisedTotalETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "raisedTotalSCToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "soldToken",
              "type": "uint256"
            }
          ],
          "internalType": "struct PresaleVault.PresaleInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoundHardCapInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "r1HardCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r2HardCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r3HardCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct PresaleVault.RoundHardCapInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoundTimeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "r1StartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r1EndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r2StartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r2EndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r3StartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r3EndTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct PresaleVault.RoundTimeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoundTokenSaleInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "r1SoldToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r1TokenForSale",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r2SoldToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r2TokenForSale",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r3SoldToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r3TokenForSale",
              "type": "uint256"
            }
          ],
          "internalType": "struct PresaleVault.RoundTokenSaleInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenPriceInUSD",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "presale1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "presale2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "presale3",
              "type": "uint256"
            }
          ],
          "internalType": "struct PresaleVault.TokenPriceInUSD",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "r1Purchased",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r2Purchased",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r3Purchased",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r1Claimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r2Claimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r3Claimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSCInvested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalETHInvested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastClaimedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalPurchased",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainToClaim",
              "type": "uint256"
            }
          ],
          "internalType": "struct PresaleVault.UserInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOverRound1",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOverRound2",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOverRound3",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_toWallet",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_eth",
          "type": "bool"
        }
      ],
      "name": "retrieveStuckedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "round",
      "outputs": [
        {
          "internalType": "string",
          "name": "_round",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_hardcap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_soldToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_new",
          "type": "address"
        }
      ],
      "name": "updateOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "updateRound1Time",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "updateRound2Time",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "updateRound3Time",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_new",
          "type": "address"
        }
      ],
      "name": "updateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "presale1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "presale2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "presale3",
              "type": "uint256"
            }
          ],
          "internalType": "struct PresaleVault.TokenPriceInUSD",
          "name": "_price",
          "type": "tuple"
        }
      ],
      "name": "updateTokenPrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfab730869d473ff437dd808c3eefef209c3afe9e06a8c90c75191e24583aeb3c",
  "receipt": {
    "to": null,
    "from": "0x6f55456D56d3B841aeC061ad613460ABF93Bc2DA",
    "contractAddress": "0xda6f7e8f8b037A6Bd52c5A44A557933409EcF5Ff",
    "transactionIndex": 76,
    "gasUsed": "3553906",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000004000000000000000000000020000000000000200000800000000000000000000000000000000400000000000000000000000200000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x80c2ca69cb04efcdbebb838f030dba74833ae043422cccd1aa4e43614c661647",
    "transactionHash": "0xfab730869d473ff437dd808c3eefef209c3afe9e06a8c90c75191e24583aeb3c",
    "logs": [
      {
        "transactionIndex": 76,
        "blockNumber": 8192908,
        "transactionHash": "0xfab730869d473ff437dd808c3eefef209c3afe9e06a8c90c75191e24583aeb3c",
        "address": "0xda6f7e8f8b037A6Bd52c5A44A557933409EcF5Ff",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006f55456d56d3b841aec061ad613460abf93bc2da"
        ],
        "data": "0x",
        "logIndex": 207,
        "blockHash": "0x80c2ca69cb04efcdbebb838f030dba74833ae043422cccd1aa4e43614c661647"
      }
    ],
    "blockNumber": 8192908,
    "cumulativeGasUsed": "12399165",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x73fA53486754AF18652c89A86676E25889158Cf1",
    [
      "0x74605Bcafff67dC4357a5F32386a5AaE9D0d1748"
    ],
    "1745599561",
    "0x6f55456D56d3B841aeC061ad613460ABF93Bc2DA",
    [
      "1000000000000000000000000",
      "1000000000000000000000000",
      "1000000000000000000000000"
    ],
    [
      "10000",
      "15000",
      "20000"
    ],
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 1,
  "solcInputHash": "c71c15a6f5ce3daa1a2f643cb7ee285b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_allowedStableCoins\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_startingTime\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_pWallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r1HardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r2HardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r3HardCap\",\"type\":\"uint256\"}],\"internalType\":\"struct PresaleVault.RoundHardCapInfo\",\"name\":\"_capInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"presale1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presale2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presale3\",\"type\":\"uint256\"}],\"internalType\":\"struct PresaleVault.TokenPriceInUSD\",\"name\":\"_price\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountNotAvailableForSale\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimNotEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelayNotOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Invalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeedGreaterThanCurrent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAmountToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStarted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Round3NotFinished\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoundAlreadyStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoundNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SCNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountclaimed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountPaidInUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_coins\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_status\",\"type\":\"bool[]\"}],\"name\":\"addAllowedStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PresaleVault.PaymentType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amountToPay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimPercentages\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"presale1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presale2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presale3\",\"type\":\"uint256\"}],\"internalType\":\"struct PresaleVault.ClaimPercentages\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimStartAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getIsAllowedStableCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinDaysBetweenClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPresaleInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"raisedTotalETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raisedTotalSCToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldToken\",\"type\":\"uint256\"}],\"internalType\":\"struct PresaleVault.PresaleInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoundHardCapInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r1HardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r2HardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r3HardCap\",\"type\":\"uint256\"}],\"internalType\":\"struct PresaleVault.RoundHardCapInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoundTimeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r1StartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r1EndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r2StartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r2EndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r3StartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r3EndTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PresaleVault.RoundTimeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoundTokenSaleInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r1SoldToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r1TokenForSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r2SoldToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r2TokenForSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r3SoldToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r3TokenForSale\",\"type\":\"uint256\"}],\"internalType\":\"struct PresaleVault.RoundTokenSaleInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPriceInUSD\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"presale1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presale2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presale3\",\"type\":\"uint256\"}],\"internalType\":\"struct PresaleVault.TokenPriceInUSD\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r1Purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r2Purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r3Purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r1Claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r2Claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r3Claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSCInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalETHInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainToClaim\",\"type\":\"uint256\"}],\"internalType\":\"struct PresaleVault.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOverRound1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOverRound2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOverRound3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toWallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_eth\",\"type\":\"bool\"}],\"name\":\"retrieveStuckedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_round\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_soldToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"updateRound1Time\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"updateRound2Time\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"updateRound3Time\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"presale1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presale2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presale3\",\"type\":\"uint256\"}],\"internalType\":\"struct PresaleVault.TokenPriceInUSD\",\"name\":\"_price\",\"type\":\"tuple\"}],\"name\":\"updateTokenPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PresaleVault.sol\":\"PresaleVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/PresaleVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n    error OwnableUnauthorizedAccount(address account);\\r\\n    error OwnableInvalidOwner(address owner);\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n    constructor(address initialOwner) {\\r\\n        if (initialOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(initialOwner);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function _checkOwner() internal view virtual {\\r\\n        if (owner() != _msgSender()) {\\r\\n            revert OwnableUnauthorizedAccount(_msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        if (newOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\ninterface IERC20 {\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n}\\r\\ninterface AggregatorV3Interface {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function description() external view returns (string memory);\\r\\n\\r\\n    function version() external view returns (uint256);\\r\\n\\r\\n    function getRoundData(\\r\\n        uint80 _roundId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint80 roundId,\\r\\n            int256 answer,\\r\\n            uint256 startedAt,\\r\\n            uint256 updatedAt,\\r\\n            uint80 answeredInRound\\r\\n        );\\r\\n\\r\\n    function latestRoundData()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint80 roundId,\\r\\n            int256 answer,\\r\\n            uint256 startedAt,\\r\\n            uint256 updatedAt,\\r\\n            uint80 answeredInRound\\r\\n        );\\r\\n}\\r\\ncontract PresaleVault is Ownable {\\r\\n    error NeedGreaterThanCurrent();\\r\\n    error RoundAlreadyStarted();\\r\\n    error AlreadySet();\\r\\n    error Round3NotFinished();\\r\\n    error NotStarted();\\r\\n    error AmountNotAvailableForSale();\\r\\n    error RoundNotMatch();\\r\\n    error TransferFailed();\\r\\n    error SCNotAllowed();\\r\\n    error AlreadyEnabled();\\r\\n    error Invalid();\\r\\n    error ClaimNotEnabled();\\r\\n    error DelayNotOver();\\r\\n    error NoAmountToClaim();\\r\\n    error LengthError();\\r\\n    error AmountZero();\\r\\n    IERC20 private token;\\r\\n    TokenPriceInUSD private tokenPriceInUSD;\\r\\n    uint256 private precision = 10000000;\\r\\n    uint256 private minDaysBetweenClaims;\\r\\n    ClaimPercentages private claimPercentages;\\r\\n    address payable projectWallet;\\r\\n    uint256 private roundPeriod;\\r\\n    AggregatorV3Interface priceFeed;\\r\\n    mapping(address => bool) private isAllowedStableCoin;\\r\\n    mapping(address => UserInfo) private userInfo;\\r\\n    RoundTimeInfo private roundTimeInfo;\\r\\n    RoundHardCapInfo private roundHardCapInfo;\\r\\n    RoundTokenSaleInfo private roundTokenSaleInfo;\\r\\n    PresaleInfo private presaleInfo;\\r\\n    bool private isClaimEnabled;\\r\\n    uint256 private claimStartAt;\\r\\n\\r\\n    struct RoundTimeInfo {\\r\\n        uint256 r1StartTime;\\r\\n        uint256 r1EndTime;\\r\\n        uint256 r2StartTime;\\r\\n        uint256 r2EndTime;\\r\\n        uint256 r3StartTime;\\r\\n        uint256 r3EndTime;\\r\\n    }\\r\\n\\r\\n    struct RoundHardCapInfo {\\r\\n        uint256 r1HardCap;\\r\\n        uint256 r2HardCap;\\r\\n        uint256 r3HardCap;\\r\\n    }\\r\\n\\r\\n    struct RoundTokenSaleInfo {\\r\\n        uint256 r1SoldToken;\\r\\n        uint256 r1TokenForSale;\\r\\n        uint256 r2SoldToken;\\r\\n        uint256 r2TokenForSale;\\r\\n        uint256 r3SoldToken;\\r\\n        uint256 r3TokenForSale;\\r\\n    }\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 r1Purchased;\\r\\n        uint256 r2Purchased;\\r\\n        uint256 r3Purchased;\\r\\n        uint256 r1Claimed;\\r\\n        uint256 r2Claimed;\\r\\n        uint256 r3Claimed;\\r\\n        uint256 totalSCInvested;\\r\\n        uint256 totalETHInvested;\\r\\n        uint256 lastClaimedAt;\\r\\n        uint256 totalPurchased;\\r\\n        uint256 totalClaimed;\\r\\n        uint256 remainToClaim;\\r\\n    }\\r\\n\\r\\n    struct PresaleInfo {\\r\\n        uint256 raisedTotalETH;\\r\\n        uint256 raisedTotalSCToken;\\r\\n        uint256 soldToken;\\r\\n    }\\r\\n\\r\\n    struct TokenPriceInUSD {\\r\\n        uint256 presale1;\\r\\n        uint256 presale2;\\r\\n        uint256 presale3;\\r\\n    }\\r\\n    struct ClaimPercentages {\\r\\n        uint256 presale1;\\r\\n        uint256 presale2;\\r\\n        uint256 presale3;\\r\\n    }\\r\\n    enum PaymentType {\\r\\n        ETH,\\r\\n        StableCoin\\r\\n    }\\r\\n\\r\\n    event TokenPurchased(\\r\\n        uint256 indexed tokenAmount,\\r\\n        uint256 indexed amountPaidInUSD,\\r\\n        address purchaser\\r\\n    );\\r\\n    event TokenClaimed(\\r\\n        uint256 indexed amountclaimed,\\r\\n        uint256 indexed timestamp,\\r\\n        address claimer\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        address _token,\\r\\n        address[] memory _allowedStableCoins,\\r\\n        uint256 _startingTime,\\r\\n        address payable _pWallet,\\r\\n        RoundHardCapInfo memory _capInfo,\\r\\n        TokenPriceInUSD memory _price,\\r\\n        address _oracle\\r\\n    ) Ownable(msg.sender) {\\r\\n        if (_startingTime < block.timestamp) {\\r\\n            revert NeedGreaterThanCurrent();\\r\\n        }\\r\\n        priceFeed = AggregatorV3Interface(_oracle);\\r\\n        projectWallet = _pWallet;\\r\\n        roundHardCapInfo = _capInfo;\\r\\n        roundPeriod = 30 days;\\r\\n        minDaysBetweenClaims = 60 days;\\r\\n        claimPercentages = ClaimPercentages(\\r\\n            uint256(10),\\r\\n            uint256(8),\\r\\n            uint256(5)\\r\\n        );\\r\\n        token = IERC20(_token);\\r\\n        claimStartAt = block.timestamp + 5 minutes;\\r\\n        for (uint256 i = 0; i < _allowedStableCoins.length; i++) {\\r\\n            isAllowedStableCoin[_allowedStableCoins[i]] = true;\\r\\n        }\\r\\n        roundTimeInfo.r1StartTime = block.timestamp + 5 minutes;\\r\\n        roundTimeInfo.r1EndTime = (roundTimeInfo.r1StartTime + roundPeriod) - 1;\\r\\n        roundTimeInfo.r2StartTime = roundTimeInfo.r1EndTime + 1;\\r\\n        roundTimeInfo.r2EndTime =\\r\\n            (roundTimeInfo.r2StartTime + roundPeriod * 2) -\\r\\n            1;\\r\\n        roundTimeInfo.r3StartTime = roundTimeInfo.r2EndTime + roundPeriod + 1;\\r\\n        roundTimeInfo.r3EndTime = (roundTimeInfo.r3StartTime + roundPeriod) - 1;\\r\\n\\r\\n        roundTokenSaleInfo.r1TokenForSale = roundHardCapInfo.r1HardCap;\\r\\n        roundTokenSaleInfo.r2TokenForSale = roundHardCapInfo.r2HardCap;\\r\\n        roundTokenSaleInfo.r3TokenForSale = roundHardCapInfo.r3HardCap;\\r\\n        _setPrice(_price);\\r\\n    }\\r\\n\\r\\n    function updateOracle(address _new) public onlyOwner {\\r\\n        priceFeed = AggregatorV3Interface(_new);\\r\\n    }\\r\\n\\r\\n    function updateToken(address _new) public onlyOwner {\\r\\n        if (isClaimEnabled) {\\r\\n            revert AlreadyEnabled();\\r\\n        }\\r\\n        token = IERC20(_new);\\r\\n    }\\r\\n\\r\\n    function addAllowedStableCoin(\\r\\n        address[] memory _coins,\\r\\n        bool[] memory _status\\r\\n    ) public onlyOwner {\\r\\n        if (_coins.length != _status.length) {\\r\\n            revert LengthError();\\r\\n        }\\r\\n        for (uint256 i = 0; i < _coins.length; i++) {\\r\\n            isAllowedStableCoin[_coins[i]] = _status[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enableClaim() public onlyOwner {\\r\\n        if (isClaimEnabled) {\\r\\n            revert AlreadyEnabled();\\r\\n        }\\r\\n        isClaimEnabled = true;\\r\\n        uint256 amount = roundHardCapInfo.r1HardCap +\\r\\n            roundHardCapInfo.r2HardCap +\\r\\n            roundHardCapInfo.r3HardCap;\\r\\n        token.transferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function updateRound1Time(\\r\\n        uint256 _startTime\\r\\n    ) public onlyOwner returns (bool) {\\r\\n        if (_startTime < block.timestamp) {\\r\\n            revert NeedGreaterThanCurrent();\\r\\n        }\\r\\n        if (block.timestamp > roundTimeInfo.r1StartTime) {\\r\\n            revert RoundAlreadyStarted();\\r\\n        }\\r\\n        claimStartAt = _startTime;\\r\\n        roundTimeInfo.r1StartTime = _startTime;\\r\\n        roundTimeInfo.r1EndTime = (roundTimeInfo.r1StartTime + roundPeriod) - 1;\\r\\n        roundTimeInfo.r2StartTime = roundTimeInfo.r1EndTime + 1;\\r\\n        roundTimeInfo.r2EndTime =\\r\\n            (roundTimeInfo.r2StartTime + roundPeriod * 2) -\\r\\n            1;\\r\\n        roundTimeInfo.r3StartTime = roundTimeInfo.r2EndTime + 1;\\r\\n        roundTimeInfo.r3EndTime = (roundTimeInfo.r3StartTime + roundPeriod) - 1;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateRound2Time(\\r\\n        uint256 _startTime\\r\\n    ) public onlyOwner returns (bool) {\\r\\n        if (_startTime < block.timestamp) {\\r\\n            revert NeedGreaterThanCurrent();\\r\\n        }\\r\\n        if (block.timestamp > roundTimeInfo.r2StartTime) {\\r\\n            revert RoundAlreadyStarted();\\r\\n        }\\r\\n        roundTimeInfo.r1EndTime = block.timestamp;\\r\\n        roundTimeInfo.r2StartTime = _startTime;\\r\\n        roundTimeInfo.r2EndTime =\\r\\n            (roundTimeInfo.r2StartTime + roundPeriod * 2) -\\r\\n            1;\\r\\n        roundTimeInfo.r3StartTime = roundTimeInfo.r2EndTime + 1;\\r\\n        roundTimeInfo.r3EndTime = (roundTimeInfo.r3StartTime + roundPeriod) - 1;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateRound3Time(\\r\\n        uint256 _startTime\\r\\n    ) public onlyOwner returns (bool) {\\r\\n        if (_startTime < block.timestamp) {\\r\\n            revert NeedGreaterThanCurrent();\\r\\n        }\\r\\n        if (block.timestamp > roundTimeInfo.r3StartTime) {\\r\\n            revert RoundAlreadyStarted();\\r\\n        }\\r\\n        roundTimeInfo.r2EndTime = block.timestamp;\\r\\n        roundTimeInfo.r3StartTime = _startTime;\\r\\n        roundTimeInfo.r3EndTime = (roundTimeInfo.r3StartTime + roundPeriod) - 1;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateTokenPrice(\\r\\n        TokenPriceInUSD memory _price\\r\\n    ) public onlyOwner returns (bool) {\\r\\n        _setPrice(_price);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _setPrice(TokenPriceInUSD memory _price) private {\\r\\n        if (block.timestamp > roundTimeInfo.r1StartTime) {\\r\\n            revert RoundAlreadyStarted();\\r\\n        }\\r\\n        tokenPriceInUSD = _price;\\r\\n    }\\r\\n\\r\\n    function retrieveStuckedAsset(\\r\\n        address _tokenAddr,\\r\\n        uint256 _amount,\\r\\n        address _toWallet,\\r\\n        bool _eth\\r\\n    ) public onlyOwner returns (bool) {\\r\\n        if (block.timestamp < roundTimeInfo.r3EndTime) {\\r\\n            revert Round3NotFinished();\\r\\n        }\\r\\n        IERC20(_tokenAddr).transfer(_toWallet, _amount);\\r\\n        if (address(this).balance > 0 && _eth) {\\r\\n            (bool success, ) = projectWallet.call{value: address(this).balance}(\\r\\n                \\\"\\\"\\r\\n            );\\r\\n            if (!success) revert TransferFailed();\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        buy(PaymentType.ETH, msg.value, address(0));\\r\\n    }\\r\\n\\r\\n    function buy(\\r\\n        PaymentType _type,\\r\\n        uint256 _amountToPay,\\r\\n        address _paymentToken\\r\\n    ) public payable returns (bool) {\\r\\n        if (tokenPriceInUSD.presale1 == 0) {\\r\\n            revert NotStarted();\\r\\n        }\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        address currentInvestor = msg.sender;\\r\\n        uint256 amountToPay;\\r\\n        UserInfo storage user = userInfo[currentInvestor];\\r\\n        if (_type == PaymentType.ETH) {\\r\\n            amountToPay = getConversionRate(msg.value);\\r\\n            (bool success, ) = projectWallet.call{value: msg.value}(\\\"\\\");\\r\\n            if (!success) revert TransferFailed();\\r\\n            user.totalETHInvested += amountToPay;\\r\\n            presaleInfo.raisedTotalETH += amountToPay;\\r\\n        } else if (_type == PaymentType.StableCoin) {\\r\\n            amountToPay = _amountToPay;\\r\\n            if (_paymentToken != address(0)) {\\r\\n                if (!isAllowedStableCoin[_paymentToken]) {\\r\\n                    revert SCNotAllowed();\\r\\n                }\\r\\n                IERC20(_paymentToken).transferFrom(\\r\\n                    msg.sender,\\r\\n                    projectWallet,\\r\\n                    amountToPay\\r\\n                );\\r\\n                user.totalSCInvested += amountToPay;\\r\\n            }\\r\\n            presaleInfo.raisedTotalSCToken += amountToPay;\\r\\n        }\\r\\n\\r\\n        uint256 amount;\\r\\n\\r\\n        if (\\r\\n            currentTime >= roundTimeInfo.r1StartTime &&\\r\\n            currentTime <= roundTimeInfo.r1EndTime\\r\\n        ) {\\r\\n            amount = (amountToPay * tokenPriceInUSD.presale1) / precision;\\r\\n            if (roundTokenSaleInfo.r1TokenForSale < amount) {\\r\\n                revert AmountNotAvailableForSale();\\r\\n            }\\r\\n            roundTokenSaleInfo.r1TokenForSale -= amount;\\r\\n            roundTokenSaleInfo.r1SoldToken += amount;\\r\\n            user.r1Purchased += amount;\\r\\n        } else if (\\r\\n            currentTime >= roundTimeInfo.r2StartTime &&\\r\\n            currentTime <= roundTimeInfo.r2EndTime\\r\\n        ) {\\r\\n            amount = (amountToPay * tokenPriceInUSD.presale2) / precision;\\r\\n            if (roundTokenSaleInfo.r2TokenForSale < amount) {\\r\\n                revert AmountNotAvailableForSale();\\r\\n            }\\r\\n            roundTokenSaleInfo.r2TokenForSale -= amount;\\r\\n            roundTokenSaleInfo.r2SoldToken += amount;\\r\\n            user.r2Purchased += amount;\\r\\n        } else if (\\r\\n            currentTime >= roundTimeInfo.r1StartTime &&\\r\\n            currentTime <= roundTimeInfo.r1EndTime\\r\\n        ) {\\r\\n            amount = (amountToPay * tokenPriceInUSD.presale3) / precision;\\r\\n            if (roundTokenSaleInfo.r3TokenForSale < amount) {\\r\\n                revert AmountNotAvailableForSale();\\r\\n            }\\r\\n\\r\\n            roundTokenSaleInfo.r3TokenForSale -= amount;\\r\\n            roundTokenSaleInfo.r3SoldToken += amount;\\r\\n            user.r3Purchased += amount;\\r\\n        } else {\\r\\n            revert RoundNotMatch();\\r\\n        }\\r\\n        if (amount <= 0) {\\r\\n            revert AmountZero();\\r\\n        }\\r\\n        presaleInfo.soldToken += amount;\\r\\n        user.totalPurchased += amount;\\r\\n        user.remainToClaim += amount;\\r\\n        emit TokenPurchased(amount, amountToPay, currentInvestor);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function claim() public returns (bool) {\\r\\n        if (block.timestamp < claimStartAt && !isClaimEnabled) {\\r\\n            revert ClaimNotEnabled();\\r\\n        }\\r\\n\\r\\n        UserInfo storage _user = userInfo[msg.sender];\\r\\n        if (\\r\\n            _user.lastClaimedAt != 0 &&\\r\\n            block.timestamp < _user.lastClaimedAt + minDaysBetweenClaims\\r\\n        ) {\\r\\n            revert DelayNotOver();\\r\\n        }\\r\\n        uint256 amount;\\r\\n        uint256 _timeGap;\\r\\n\\r\\n        if (block.timestamp > roundTimeInfo.r3EndTime + 400 days) {\\r\\n            amount = _user.remainToClaim;\\r\\n        } else {\\r\\n            _timeGap =\\r\\n                block.timestamp -\\r\\n                (_user.lastClaimedAt == 0 ? claimStartAt : _user.lastClaimedAt);\\r\\n            uint256 _daysDiff;\\r\\n            if (_user.lastClaimedAt == 0 && _daysDiff == 0) _daysDiff = 1;\\r\\n            else _daysDiff += (_timeGap / minDaysBetweenClaims);\\r\\n            if (block.timestamp > roundTimeInfo.r1StartTime) {\\r\\n                if (_user.r1Purchased > _user.r1Claimed) {\\r\\n                    uint256 toBeClaim1 = (_user.r1Purchased *\\r\\n                        claimPercentages.presale1) / 100;\\r\\n                    if (toBeClaim1 > _user.r1Purchased - _user.r1Claimed) {\\r\\n                        toBeClaim1 = _user.r1Purchased - _user.r1Claimed;\\r\\n                    }\\r\\n                    _user.r1Claimed += toBeClaim1;\\r\\n                    amount += toBeClaim1;\\r\\n                }\\r\\n            }\\r\\n            if (block.timestamp > roundTimeInfo.r2StartTime) {\\r\\n                if (_user.r2Purchased > _user.r2Claimed) {\\r\\n                    uint256 toBeClaim2 = (_user.r2Purchased *\\r\\n                        claimPercentages.presale2) / 100;\\r\\n                    if (toBeClaim2 > _user.r2Purchased - _user.r2Claimed) {\\r\\n                        toBeClaim2 = _user.r2Purchased - _user.r2Claimed;\\r\\n                    }\\r\\n                    _user.r2Claimed += toBeClaim2;\\r\\n                    amount += toBeClaim2;\\r\\n                }\\r\\n            }\\r\\n            if (block.timestamp > roundTimeInfo.r3StartTime) {\\r\\n                if (_user.r3Purchased > _user.r3Claimed) {\\r\\n                    uint256 toBeClaim3 = (_user.r3Purchased *\\r\\n                        claimPercentages.presale3) / 100;\\r\\n                    if (toBeClaim3 > _user.r3Purchased - _user.r3Claimed) {\\r\\n                        toBeClaim3 = _user.r3Purchased - _user.r3Claimed;\\r\\n                    }\\r\\n                    _user.r3Claimed += toBeClaim3;\\r\\n                    amount += toBeClaim3;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if (_user.remainToClaim < amount) {\\r\\n            amount = _user.remainToClaim;\\r\\n        }\\r\\n        if (amount == 0) {\\r\\n            revert NoAmountToClaim();\\r\\n        }\\r\\n        _user.totalClaimed += amount;\\r\\n        _user.remainToClaim -= amount;\\r\\n        _user.lastClaimedAt = block.timestamp;\\r\\n        token.transfer(msg.sender, amount);\\r\\n        emit TokenClaimed(amount, block.timestamp, msg.sender);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount\\r\\n    ) internal view returns (uint256) {\\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        uint256 ethPrice = uint256(answer) * 10000000000;\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n\\r\\n    function round()\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            string memory _round,\\r\\n            uint256 endTime,\\r\\n            uint256 _hardcap,\\r\\n            uint256 _soldToken,\\r\\n            uint _price\\r\\n        )\\r\\n    {\\r\\n        uint currentTime = block.timestamp;\\r\\n        if (\\r\\n            currentTime >= roundTimeInfo.r1StartTime &&\\r\\n            currentTime <= roundTimeInfo.r1EndTime\\r\\n        ) {\\r\\n            string memory Round = \\\"Private Sale 1\\\";\\r\\n            return (\\r\\n                Round,\\r\\n                roundTimeInfo.r1EndTime,\\r\\n                roundHardCapInfo.r1HardCap,\\r\\n                roundTokenSaleInfo.r1SoldToken,\\r\\n                tokenPriceInUSD.presale1\\r\\n            );\\r\\n        } else if (\\r\\n            currentTime >= roundTimeInfo.r2StartTime &&\\r\\n            currentTime <= roundTimeInfo.r2EndTime\\r\\n        ) {\\r\\n            string memory Round = \\\"Private Sale 2\\\";\\r\\n            return (\\r\\n                Round,\\r\\n                roundTimeInfo.r2EndTime,\\r\\n                roundHardCapInfo.r2HardCap,\\r\\n                roundTokenSaleInfo.r2SoldToken,\\r\\n                tokenPriceInUSD.presale2\\r\\n            );\\r\\n        } else if (\\r\\n            currentTime >= roundTimeInfo.r3StartTime &&\\r\\n            currentTime <= roundTimeInfo.r3EndTime\\r\\n        ) {\\r\\n            string memory Round = \\\"Public Sale 1\\\";\\r\\n            return (\\r\\n                Round,\\r\\n                roundTimeInfo.r3EndTime,\\r\\n                roundHardCapInfo.r3HardCap,\\r\\n                roundTokenSaleInfo.r3SoldToken,\\r\\n                tokenPriceInUSD.presale3\\r\\n            );\\r\\n        } else {\\r\\n            require(false, \\\"Please check ICO time\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isOverRound1() public view returns (bool) {\\r\\n        if (\\r\\n            block.timestamp > roundTimeInfo.r1EndTime ||\\r\\n            roundTokenSaleInfo.r1TokenForSale == 0\\r\\n        ) {\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isOverRound2() public view returns (bool) {\\r\\n        if (\\r\\n            block.timestamp > roundTimeInfo.r2EndTime ||\\r\\n            roundTokenSaleInfo.r2TokenForSale == 0\\r\\n        ) {\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isOverRound3() public view returns (bool) {\\r\\n        if (\\r\\n            block.timestamp > roundTimeInfo.r3EndTime ||\\r\\n            roundTokenSaleInfo.r3TokenForSale == 0\\r\\n        ) {\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getPresaleInfo() public view returns (PresaleInfo memory) {\\r\\n        return presaleInfo;\\r\\n    }\\r\\n    function getRoundTimeInfo() public view returns (RoundTimeInfo memory) {\\r\\n        return roundTimeInfo;\\r\\n    }\\r\\n    function getRoundHardCapInfo()\\r\\n        public\\r\\n        view\\r\\n        returns (RoundHardCapInfo memory)\\r\\n    {\\r\\n        return roundHardCapInfo;\\r\\n    }\\r\\n    function getRoundTokenSaleInfo()\\r\\n        public\\r\\n        view\\r\\n        returns (RoundTokenSaleInfo memory)\\r\\n    {\\r\\n        return roundTokenSaleInfo;\\r\\n    }\\r\\n    function getUserInfo(address _user) public view returns (UserInfo memory) {\\r\\n        return userInfo[_user];\\r\\n    }\\r\\n    function getTokenPriceInUSD() public view returns (TokenPriceInUSD memory) {\\r\\n        return tokenPriceInUSD;\\r\\n    }\\r\\n    function getClaimPercentages()\\r\\n        public\\r\\n        view\\r\\n        returns (ClaimPercentages memory)\\r\\n    {\\r\\n        return claimPercentages;\\r\\n    }\\r\\n    function getClaimStartAt() public view returns (uint256) {\\r\\n        return claimStartAt;\\r\\n    }\\r\\n    function getMinDaysBetweenClaims() public view returns (uint256) {\\r\\n        return minDaysBetweenClaims;\\r\\n    }\\r\\n    function getIsAllowedStableCoin(address _token) public view returns (bool) {\\r\\n        return isAllowedStableCoin[_token];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3171f287f390fd650a590557acb7e4525866827fbdb6e5a21557af6d9336f87d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526298968060055534801561001757600080fd5b50604051613dfc380380613dfc8339818101604052810190610039919061082e565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100ac5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100a391906108fd565b60405180910390fd5b6100bb816103f860201b60201c565b50428510156100f6576040517f123d7a0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082601560008201518160000155602082015181600101556040820151816002015590505062278d00600b81905550624f1a006006819055506040518060600160405280600a8152602001600881526020016005815250600760008201518160000155602082015181600101556040820151816002015590505086600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061012c426102409190610947565b60228190555060005b86518110156102d1576001600d600089848151811061026b5761026a61097b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050610249565b5061012c426102e09190610947565b600f600001819055506001600b54600f600001546102fe9190610947565b61030891906109aa565b600f600101819055506001600f600101546103239190610947565b600f6002018190555060016002600b5461033d91906109de565b600f6002015461034d9190610947565b61035791906109aa565b600f600301819055506001600b54600f600301546103759190610947565b61037f9190610947565b600f600401819055506001600b54600f6004015461039d9190610947565b6103a791906109aa565b600f600501819055506015600001546018600101819055506015600101546018600301819055506015600201546018600501819055506103ec826104bc60201b60201c565b50505050505050610a20565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600f600001544211156104fb576040517f8834381b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260008201518160000155602082015181600101556040820151816002015590505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061056182610536565b9050919050565b61057181610556565b811461057c57600080fd5b50565b60008151905061058e81610568565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105e282610599565b810181811067ffffffffffffffff82111715610601576106006105aa565b5b80604052505050565b6000610614610522565b905061062082826105d9565b919050565b600067ffffffffffffffff8211156106405761063f6105aa565b5b602082029050602081019050919050565b600080fd5b600061066961066484610625565b61060a565b9050808382526020820190506020840283018581111561068c5761068b610651565b5b835b818110156106b557806106a1888261057f565b84526020840193505060208101905061068e565b5050509392505050565b600082601f8301126106d4576106d3610594565b5b81516106e4848260208601610656565b91505092915050565b6000819050919050565b610700816106ed565b811461070b57600080fd5b50565b60008151905061071d816106f7565b92915050565b600061072e82610536565b9050919050565b61073e81610723565b811461074957600080fd5b50565b60008151905061075b81610735565b92915050565b600080fd5b60006060828403121561077c5761077b610761565b5b610786606061060a565b905060006107968482850161070e565b60008301525060206107aa8482850161070e565b60208301525060406107be8482850161070e565b60408301525092915050565b6000606082840312156107e0576107df610761565b5b6107ea606061060a565b905060006107fa8482850161070e565b600083015250602061080e8482850161070e565b60208301525060406108228482850161070e565b60408301525092915050565b6000806000806000806000610160888a03121561084e5761084d61052c565b5b600061085c8a828b0161057f565b975050602088015167ffffffffffffffff81111561087d5761087c610531565b5b6108898a828b016106bf565b965050604061089a8a828b0161070e565b95505060606108ab8a828b0161074c565b94505060806108bc8a828b01610766565b93505060e06108cd8a828b016107ca565b9250506101406108df8a828b0161057f565b91505092959891949750929550565b6108f781610556565b82525050565b600060208201905061091260008301846108ee565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610952826106ed565b915061095d836106ed565b925082820190508082111561097557610974610918565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006109b5826106ed565b91506109c0836106ed565b92508282039050818111156109d8576109d7610918565b5b92915050565b60006109e9826106ed565b91506109f4836106ed565b9250828202610a02816106ed565b91508282048414831517610a1957610a18610918565b5b5092915050565b6133cd80610a2f6000396000f3fe6080604052600436106101bb5760003560e01c80637ad3def2116100ec578063b47e53631161008a578063e4db04fb11610064578063e4db04fb14610623578063eff7580214610660578063f2fde38b1461068b578063fd47504c146106b4576101cf565b8063b47e53631461058b578063d0d5a1ba146105b6578063dc3b10ce146105e6576101cf565b80639c89f0fe116100c65780639c89f0fe146104bb578063a8525aa3146104f8578063a8766bc114610535578063b02f42b814610560576101cf565b80637ad3def21461043c5780638da5cb5b1461046557806392e65f9d14610490576101cf565b80633c48ab3f116101595780636386c1c7116101335780636386c1c7146103945780636cf557ec146103d1578063715018a6146103fa578063767fa72314610411576101cf565b80633c48ab3f146103135780634e71d92d1461033e5780635be0b33b14610369576101cf565b80631f565e31116101955780631f565e311461025757806328dae6e31461029457806329e2faac146102ab5780632e9aeff7146102d6576101cf565b8063033a35c0146101d4578063146ca531146101ff5780631cb44dfc1461022e576101cf565b366101cf576101cd60003460006106df565b005b600080fd5b3480156101e057600080fd5b506101e9610df4565b6040516101f6919061250e565b60405180910390f35b34801561020b57600080fd5b50610214610e2c565b6040516102259594939291906125c8565b60405180910390f35b34801561023a57600080fd5b5061025560048036038101906102509190612694565b61100b565b005b34801561026357600080fd5b5061027e600480360381019061027991906126ed565b611057565b60405161028b9190612735565b60405180910390f35b3480156102a057600080fd5b506102a961116e565b005b3480156102b757600080fd5b506102c06112a8565b6040516102cd9190612735565b60405180910390f35b3480156102e257600080fd5b506102fd60048036038101906102f89190612834565b6112d8565b60405161030a9190612735565b60405180910390f35b34801561031f57600080fd5b506103286112f4565b6040516103359190612735565b60405180910390f35b34801561034a57600080fd5b50610353611324565b6040516103609190612735565b60405180910390f35b34801561037557600080fd5b5061037e6117fe565b60405161038b9190612735565b60405180910390f35b3480156103a057600080fd5b506103bb60048036038101906103b69190612694565b61182e565b6040516103c89190612957565b60405180910390f35b3480156103dd57600080fd5b506103f860048036038101906103f39190612b2f565b611900565b005b34801561040657600080fd5b5061040f6119ec565b005b34801561041d57600080fd5b50610426611a00565b6040516104339190612be9565b60405180910390f35b34801561044857600080fd5b50610463600480360381019061045e9190612694565b611a38565b005b34801561047157600080fd5b5061047a611acb565b6040516104879190612c13565b60405180910390f35b34801561049c57600080fd5b506104a5611af4565b6040516104b29190612c2e565b60405180910390f35b3480156104c757600080fd5b506104e260048036038101906104dd9190612694565b611afe565b6040516104ef9190612735565b60405180910390f35b34801561050457600080fd5b5061051f600480360381019061051a9190612c49565b611b54565b60405161052c9190612735565b60405180910390f35b34801561054157600080fd5b5061054a611d01565b6040516105579190612cf2565b60405180910390f35b34801561056c57600080fd5b50610575611d39565b6040516105829190612d4f565b60405180910390f35b34801561059757600080fd5b506105a0611d71565b6040516105ad9190612de5565b60405180910390f35b6105d060048036038101906105cb9190612e25565b6106df565b6040516105dd9190612735565b60405180910390f35b3480156105f257600080fd5b5061060d600480360381019061060891906126ed565b611dc7565b60405161061a9190612735565b60405180910390f35b34801561062f57600080fd5b5061064a600480360381019061064591906126ed565b611e8f565b6040516106579190612735565b60405180910390f35b34801561066c57600080fd5b50610675611fe6565b6040516106829190612c2e565b60405180910390f35b34801561069757600080fd5b506106b260048036038101906106ad9190612694565b611ff0565b005b3480156106c057600080fd5b506106c9612076565b6040516106d69190612ef3565b60405180910390f35b6000806002600001540361071f576040517f6f312cbd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60004290506000339050600080600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600181111561078157610780612f0e565b5b88600181111561079457610793612f0e565b5b036108a6576107a2346120cc565b91506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16346040516107ec90612f6e565b60006040518083038185875af1925050503d8060008114610829576040519150601f19603f3d011682016040523d82523d6000602084013e61082e565b606091505b5050905080610869576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8282600701600082825461087d9190612fb2565b9250508190555082601e60000160008282546108999190612fb2565b9250508190555050610a68565b6001808111156108b9576108b8612f0e565b5b8860018111156108cc576108cb612f0e565b5b03610a6757869150600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610a4a57600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661098b576040517fbf888b5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd33600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b81526004016109ea93929190613045565b6020604051808303816000875af1158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190613091565b5081816006016000828254610a429190612fb2565b925050819055505b81601e6001016000828254610a5f9190612fb2565b925050819055505b5b6000600f600001548510158015610a845750600f600101548511155b15610b405760055460026000015484610a9d91906130be565b610aa7919061312f565b9050806018600101541015610ae8576040517fd013fe7000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060186001016000828254610afd9190613160565b925050819055508060186000016000828254610b199190612fb2565b9250508190555080826000016000828254610b349190612fb2565b92505081905550610d1f565b600f600201548510158015610b5a5750600f600301548511155b15610c165760055460026001015484610b7391906130be565b610b7d919061312f565b9050806018600301541015610bbe576040517fd013fe7000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060186003016000828254610bd39190613160565b925050819055508060186002016000828254610bef9190612fb2565b9250508190555080826001016000828254610c0a9190612fb2565b92505081905550610d1e565b600f600001548510158015610c305750600f600101548511155b15610ceb57600554600280015484610c4891906130be565b610c52919061312f565b9050806018600501541015610c93576040517fd013fe7000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060186005016000828254610ca89190613160565b925050819055508060186004016000828254610cc49190612fb2565b9250508190555080826002016000828254610cdf9190612fb2565b92505081905550610d1d565b6040517ff721b7ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5b60008111610d59576040517fcbca5aa200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80601e6002016000828254610d6e9190612fb2565b9250508190555080826009016000828254610d899190612fb2565b925050819055508082600b016000828254610da49190612fb2565b9250508190555082817fe58b9ee1e58fdb7c85bb2c81b24351f11e5a77f2c91dc346c0444da8d47fef5e86604051610ddc9190612c13565b60405180910390a36001955050505050509392505050565b610dfc612362565b60156040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b60606000806000806000429050600f600001548110158015610e535750600f600101548111155b15610ebc5760006040518060400160405280600e81526020017f507269766174652053616c652031000000000000000000000000000000000000815250905080600f60010154601560000154601860000154600260000154965096509650965096505050611004565b600f600201548110158015610ed65750600f600301548111155b15610f3f5760006040518060400160405280600e81526020017f507269766174652053616c652032000000000000000000000000000000000000815250905080600f60030154601560010154601860020154600260010154965096509650965096505050611004565b600f600401548110158015610f595750600f600501548111155b15610fc15760006040518060400160405280600d81526020017f5075626c69632053616c65203100000000000000000000000000000000000000815250905080600f600501546015600201546018600401546002800154965096509650965096505050611004565b6000611002576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff9906131e0565b60405180910390fd5b505b9091929394565b6110136121a9565b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006110616121a9565b4282101561109b576040517f123d7a0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f600201544211156110da576040517f8834381b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600f6001018190555081600f6002018190555060016002600b546110ff91906130be565b600f6002015461110f9190612fb2565b6111199190613160565b600f600301819055506001600f600301546111349190612fb2565b600f600401819055506001600b54600f600401546111529190612fb2565b61115c9190613160565b600f6005018190555060019050919050565b6111766121a9565b602160009054906101000a900460ff16156111bd576040517ff2a5f75a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001602160006101000a81548160ff02191690831515021790555060006015600201546015600101546015600001546111f69190612fb2565b6112009190612fb2565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161126193929190613200565b6020604051808303816000875af1158015611280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a49190613091565b5050565b6000600f600301544211806112c257506000601860030154145b156112d057600190506112d5565b600090505b90565b60006112e26121a9565b6112eb82612230565b60019050919050565b6000600f6005015442118061130e57506000601860050154145b1561131c5760019050611321565b600090505b90565b6000602254421080156113445750602160009054906101000a900460ff16155b1561137b576040517faf95b1d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160080154141580156113e3575060065481600801546113e09190612fb2565b42105b1561141a576040517f2adc88c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008063020f5800600f600501546114329190612fb2565b4211156114455782600b0154915061168d565b600083600801541461145b57826008015461145f565b6022545b4261146a9190613160565b905060008084600801541480156114815750600081145b1561148f57600190506114ab565b6006548261149d919061312f565b816114a89190612fb2565b90505b600f6000015442111561154b5783600301548460000154111561154a576000606460076000015486600001546114e191906130be565b6114eb919061312f565b9050846003015485600001546115019190613160565b81111561151f578460030154856000015461151c9190613160565b90505b808560030160008282546115339190612fb2565b9250508190555080846115469190612fb2565b9350505b5b600f600201544211156115eb578360040154846001015411156115ea5760006064600760010154866001015461158191906130be565b61158b919061312f565b9050846004015485600101546115a19190613160565b8111156115bf57846004015485600101546115bc9190613160565b90505b808560040160008282546115d39190612fb2565b9250508190555080846115e69190612fb2565b9350505b5b600f6004015442111561168b5783600501548460020154111561168a5760006064600760020154866002015461162191906130be565b61162b919061312f565b9050846005015485600201546116419190613160565b81111561165f578460050154856002015461165c9190613160565b90505b808560050160008282546116739190612fb2565b9250508190555080846116869190612fb2565b9350505b5b505b8183600b015410156116a15782600b015491505b600082036116db576040517ffc559f0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8183600a0160008282546116ef9190612fb2565b925050819055508183600b01600082825461170a9190613160565b92505081905550428360080181905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611777929190613237565b6020604051808303816000875af1158015611796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ba9190613091565b5042827f903521604cced98e46dd0d6fd82d0749b760e1b73a57fd197d10e61ff641d617336040516117ec9190612c13565b60405180910390a36001935050505090565b6000600f6001015442118061181857506000601860010154145b15611826576001905061182b565b600090505b90565b611836612383565b600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061018001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b820154815250509050919050565b6119086121a9565b8051825114611943576040517f34080bf700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b82518110156119e75781818151811061196257611961613260565b5b6020026020010151600d600085848151811061198157611980613260565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050611946565b505050565b6119f46121a9565b6119fe6000612296565b565b611a086123e4565b601e6040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b611a406121a9565b602160009054906101000a900460ff1615611a87576040517ff2a5f75a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600654905090565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000611b5e6121a9565b600f60050154421015611b9d576040517f64dba6a400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84866040518363ffffffff1660e01b8152600401611bd8929190613237565b6020604051808303816000875af1158015611bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1b9190613091565b50600047118015611c295750815b15611cf5576000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051611c7690612f6e565b60006040518083038185875af1925050503d8060008114611cb3576040519150601f19603f3d011682016040523d82523d6000602084013e611cb8565b606091505b5050905080611cf3576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b60019050949350505050565b611d09612405565b60026040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b611d41612426565b60076040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b611d79612447565b60186040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481525050905090565b6000611dd16121a9565b42821015611e0b576040517f123d7a0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f60040154421115611e4a576040517f8834381b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600f6003018190555081600f600401819055506001600b54600f60040154611e739190612fb2565b611e7d9190613160565b600f6005018190555060019050919050565b6000611e996121a9565b42821015611ed3576040517f123d7a0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f60000154421115611f12576040517f8834381b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160228190555081600f600001819055506001600b54600f60000154611f389190612fb2565b611f429190613160565b600f600101819055506001600f60010154611f5d9190612fb2565b600f6002018190555060016002600b54611f7791906130be565b600f60020154611f879190612fb2565b611f919190613160565b600f600301819055506001600f60030154611fac9190612fb2565b600f600401819055506001600b54600f60040154611fca9190612fb2565b611fd49190613160565b600f6005018190555060019050919050565b6000602254905090565b611ff86121a9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361206a5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016120619190612c13565b60405180910390fd5b61207381612296565b50565b61207e61247d565b600f6040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481525050905090565b600080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561213c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612160919061331c565b50505091505060006402540be4008261217991906130be565b90506000670de0b6b3a7640000858361219291906130be565b61219c919061312f565b9050809350505050919050565b6121b161235a565b73ffffffffffffffffffffffffffffffffffffffff166121cf611acb565b73ffffffffffffffffffffffffffffffffffffffff161461222e576121f261235a565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016122259190612c13565b60405180910390fd5b565b600f6000015442111561226f576040517f8834381b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260008201518160000155602082015181600101556040820151816002015590505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60405180606001604052806000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000819050919050565b6124c6816124b3565b82525050565b6060820160008201516124e260008501826124bd565b5060208201516124f560208501826124bd565b50604082015161250860408501826124bd565b50505050565b600060608201905061252360008301846124cc565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612563578082015181840152602081019050612548565b60008484015250505050565b6000601f19601f8301169050919050565b600061258b82612529565b6125958185612534565b93506125a5818560208601612545565b6125ae8161256f565b840191505092915050565b6125c2816124b3565b82525050565b600060a08201905081810360008301526125e28188612580565b90506125f160208301876125b9565b6125fe60408301866125b9565b61260b60608301856125b9565b61261860808301846125b9565b9695505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061266182612636565b9050919050565b61267181612656565b811461267c57600080fd5b50565b60008135905061268e81612668565b92915050565b6000602082840312156126aa576126a961262c565b5b60006126b88482850161267f565b91505092915050565b6126ca816124b3565b81146126d557600080fd5b50565b6000813590506126e7816126c1565b92915050565b6000602082840312156127035761270261262c565b5b6000612711848285016126d8565b91505092915050565b60008115159050919050565b61272f8161271a565b82525050565b600060208201905061274a6000830184612726565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61278d8261256f565b810181811067ffffffffffffffff821117156127ac576127ab612755565b5b80604052505050565b60006127bf612622565b90506127cb8282612784565b919050565b6000606082840312156127e6576127e5612750565b5b6127f060606127b5565b90506000612800848285016126d8565b6000830152506020612814848285016126d8565b6020830152506040612828848285016126d8565b60408301525092915050565b60006060828403121561284a5761284961262c565b5b6000612858848285016127d0565b91505092915050565b6101808201600082015161287860008501826124bd565b50602082015161288b60208501826124bd565b50604082015161289e60408501826124bd565b5060608201516128b160608501826124bd565b5060808201516128c460808501826124bd565b5060a08201516128d760a08501826124bd565b5060c08201516128ea60c08501826124bd565b5060e08201516128fd60e08501826124bd565b506101008201516129126101008501826124bd565b506101208201516129276101208501826124bd565b5061014082015161293c6101408501826124bd565b506101608201516129516101608501826124bd565b50505050565b60006101808201905061296d6000830184612861565b92915050565b600080fd5b600067ffffffffffffffff82111561299357612992612755565b5b602082029050602081019050919050565b600080fd5b60006129bc6129b784612978565b6127b5565b905080838252602082019050602084028301858111156129df576129de6129a4565b5b835b81811015612a0857806129f4888261267f565b8452602084019350506020810190506129e1565b5050509392505050565b600082601f830112612a2757612a26612973565b5b8135612a378482602086016129a9565b91505092915050565b600067ffffffffffffffff821115612a5b57612a5a612755565b5b602082029050602081019050919050565b612a758161271a565b8114612a8057600080fd5b50565b600081359050612a9281612a6c565b92915050565b6000612aab612aa684612a40565b6127b5565b90508083825260208201905060208402830185811115612ace57612acd6129a4565b5b835b81811015612af75780612ae38882612a83565b845260208401935050602081019050612ad0565b5050509392505050565b600082601f830112612b1657612b15612973565b5b8135612b26848260208601612a98565b91505092915050565b60008060408385031215612b4657612b4561262c565b5b600083013567ffffffffffffffff811115612b6457612b63612631565b5b612b7085828601612a12565b925050602083013567ffffffffffffffff811115612b9157612b90612631565b5b612b9d85828601612b01565b9150509250929050565b606082016000820151612bbd60008501826124bd565b506020820151612bd060208501826124bd565b506040820151612be360408501826124bd565b50505050565b6000606082019050612bfe6000830184612ba7565b92915050565b612c0d81612656565b82525050565b6000602082019050612c286000830184612c04565b92915050565b6000602082019050612c4360008301846125b9565b92915050565b60008060008060808587031215612c6357612c6261262c565b5b6000612c718782880161267f565b9450506020612c82878288016126d8565b9350506040612c938782880161267f565b9250506060612ca487828801612a83565b91505092959194509250565b606082016000820151612cc660008501826124bd565b506020820151612cd960208501826124bd565b506040820151612cec60408501826124bd565b50505050565b6000606082019050612d076000830184612cb0565b92915050565b606082016000820151612d2360008501826124bd565b506020820151612d3660208501826124bd565b506040820151612d4960408501826124bd565b50505050565b6000606082019050612d646000830184612d0d565b92915050565b60c082016000820151612d8060008501826124bd565b506020820151612d9360208501826124bd565b506040820151612da660408501826124bd565b506060820151612db960608501826124bd565b506080820151612dcc60808501826124bd565b5060a0820151612ddf60a08501826124bd565b50505050565b600060c082019050612dfa6000830184612d6a565b92915050565b60028110612e0d57600080fd5b50565b600081359050612e1f81612e00565b92915050565b600080600060608486031215612e3e57612e3d61262c565b5b6000612e4c86828701612e10565b9350506020612e5d868287016126d8565b9250506040612e6e8682870161267f565b9150509250925092565b60c082016000820151612e8e60008501826124bd565b506020820151612ea160208501826124bd565b506040820151612eb460408501826124bd565b506060820151612ec760608501826124bd565b506080820151612eda60808501826124bd565b5060a0820151612eed60a08501826124bd565b50505050565b600060c082019050612f086000830184612e78565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081905092915050565b50565b6000612f58600083612f3d565b9150612f6382612f48565b600082019050919050565b6000612f7982612f4b565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612fbd826124b3565b9150612fc8836124b3565b9250828201905080821115612fe057612fdf612f83565b5b92915050565b6000819050919050565b600061300b61300661300184612636565b612fe6565b612636565b9050919050565b600061301d82612ff0565b9050919050565b600061302f82613012565b9050919050565b61303f81613024565b82525050565b600060608201905061305a6000830186612c04565b6130676020830185613036565b61307460408301846125b9565b949350505050565b60008151905061308b81612a6c565b92915050565b6000602082840312156130a7576130a661262c565b5b60006130b58482850161307c565b91505092915050565b60006130c9826124b3565b91506130d4836124b3565b92508282026130e2816124b3565b915082820484148315176130f9576130f8612f83565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061313a826124b3565b9150613145836124b3565b92508261315557613154613100565b5b828204905092915050565b600061316b826124b3565b9150613176836124b3565b925082820390508181111561318e5761318d612f83565b5b92915050565b7f506c6561736520636865636b2049434f2074696d650000000000000000000000600082015250565b60006131ca601583612534565b91506131d582613194565b602082019050919050565b600060208201905081810360008301526131f9816131bd565b9050919050565b60006060820190506132156000830186612c04565b6132226020830185612c04565b61322f60408301846125b9565b949350505050565b600060408201905061324c6000830185612c04565b61325960208301846125b9565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600069ffffffffffffffffffff82169050919050565b6132ae8161328f565b81146132b957600080fd5b50565b6000815190506132cb816132a5565b92915050565b6000819050919050565b6132e4816132d1565b81146132ef57600080fd5b50565b600081519050613301816132db565b92915050565b600081519050613316816126c1565b92915050565b600080600080600060a086880312156133385761333761262c565b5b6000613346888289016132bc565b9550506020613357888289016132f2565b945050604061336888828901613307565b935050606061337988828901613307565b925050608061338a888289016132bc565b915050929550929590935056fea26469706673582212200e2bd455367d423955a46220809d53fcf11199c5cea4a2145610708f15c266f964736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106101bb5760003560e01c80637ad3def2116100ec578063b47e53631161008a578063e4db04fb11610064578063e4db04fb14610623578063eff7580214610660578063f2fde38b1461068b578063fd47504c146106b4576101cf565b8063b47e53631461058b578063d0d5a1ba146105b6578063dc3b10ce146105e6576101cf565b80639c89f0fe116100c65780639c89f0fe146104bb578063a8525aa3146104f8578063a8766bc114610535578063b02f42b814610560576101cf565b80637ad3def21461043c5780638da5cb5b1461046557806392e65f9d14610490576101cf565b80633c48ab3f116101595780636386c1c7116101335780636386c1c7146103945780636cf557ec146103d1578063715018a6146103fa578063767fa72314610411576101cf565b80633c48ab3f146103135780634e71d92d1461033e5780635be0b33b14610369576101cf565b80631f565e31116101955780631f565e311461025757806328dae6e31461029457806329e2faac146102ab5780632e9aeff7146102d6576101cf565b8063033a35c0146101d4578063146ca531146101ff5780631cb44dfc1461022e576101cf565b366101cf576101cd60003460006106df565b005b600080fd5b3480156101e057600080fd5b506101e9610df4565b6040516101f6919061250e565b60405180910390f35b34801561020b57600080fd5b50610214610e2c565b6040516102259594939291906125c8565b60405180910390f35b34801561023a57600080fd5b5061025560048036038101906102509190612694565b61100b565b005b34801561026357600080fd5b5061027e600480360381019061027991906126ed565b611057565b60405161028b9190612735565b60405180910390f35b3480156102a057600080fd5b506102a961116e565b005b3480156102b757600080fd5b506102c06112a8565b6040516102cd9190612735565b60405180910390f35b3480156102e257600080fd5b506102fd60048036038101906102f89190612834565b6112d8565b60405161030a9190612735565b60405180910390f35b34801561031f57600080fd5b506103286112f4565b6040516103359190612735565b60405180910390f35b34801561034a57600080fd5b50610353611324565b6040516103609190612735565b60405180910390f35b34801561037557600080fd5b5061037e6117fe565b60405161038b9190612735565b60405180910390f35b3480156103a057600080fd5b506103bb60048036038101906103b69190612694565b61182e565b6040516103c89190612957565b60405180910390f35b3480156103dd57600080fd5b506103f860048036038101906103f39190612b2f565b611900565b005b34801561040657600080fd5b5061040f6119ec565b005b34801561041d57600080fd5b50610426611a00565b6040516104339190612be9565b60405180910390f35b34801561044857600080fd5b50610463600480360381019061045e9190612694565b611a38565b005b34801561047157600080fd5b5061047a611acb565b6040516104879190612c13565b60405180910390f35b34801561049c57600080fd5b506104a5611af4565b6040516104b29190612c2e565b60405180910390f35b3480156104c757600080fd5b506104e260048036038101906104dd9190612694565b611afe565b6040516104ef9190612735565b60405180910390f35b34801561050457600080fd5b5061051f600480360381019061051a9190612c49565b611b54565b60405161052c9190612735565b60405180910390f35b34801561054157600080fd5b5061054a611d01565b6040516105579190612cf2565b60405180910390f35b34801561056c57600080fd5b50610575611d39565b6040516105829190612d4f565b60405180910390f35b34801561059757600080fd5b506105a0611d71565b6040516105ad9190612de5565b60405180910390f35b6105d060048036038101906105cb9190612e25565b6106df565b6040516105dd9190612735565b60405180910390f35b3480156105f257600080fd5b5061060d600480360381019061060891906126ed565b611dc7565b60405161061a9190612735565b60405180910390f35b34801561062f57600080fd5b5061064a600480360381019061064591906126ed565b611e8f565b6040516106579190612735565b60405180910390f35b34801561066c57600080fd5b50610675611fe6565b6040516106829190612c2e565b60405180910390f35b34801561069757600080fd5b506106b260048036038101906106ad9190612694565b611ff0565b005b3480156106c057600080fd5b506106c9612076565b6040516106d69190612ef3565b60405180910390f35b6000806002600001540361071f576040517f6f312cbd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60004290506000339050600080600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600181111561078157610780612f0e565b5b88600181111561079457610793612f0e565b5b036108a6576107a2346120cc565b91506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16346040516107ec90612f6e565b60006040518083038185875af1925050503d8060008114610829576040519150601f19603f3d011682016040523d82523d6000602084013e61082e565b606091505b5050905080610869576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8282600701600082825461087d9190612fb2565b9250508190555082601e60000160008282546108999190612fb2565b9250508190555050610a68565b6001808111156108b9576108b8612f0e565b5b8860018111156108cc576108cb612f0e565b5b03610a6757869150600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610a4a57600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661098b576040517fbf888b5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd33600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b81526004016109ea93929190613045565b6020604051808303816000875af1158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190613091565b5081816006016000828254610a429190612fb2565b925050819055505b81601e6001016000828254610a5f9190612fb2565b925050819055505b5b6000600f600001548510158015610a845750600f600101548511155b15610b405760055460026000015484610a9d91906130be565b610aa7919061312f565b9050806018600101541015610ae8576040517fd013fe7000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060186001016000828254610afd9190613160565b925050819055508060186000016000828254610b199190612fb2565b9250508190555080826000016000828254610b349190612fb2565b92505081905550610d1f565b600f600201548510158015610b5a5750600f600301548511155b15610c165760055460026001015484610b7391906130be565b610b7d919061312f565b9050806018600301541015610bbe576040517fd013fe7000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060186003016000828254610bd39190613160565b925050819055508060186002016000828254610bef9190612fb2565b9250508190555080826001016000828254610c0a9190612fb2565b92505081905550610d1e565b600f600001548510158015610c305750600f600101548511155b15610ceb57600554600280015484610c4891906130be565b610c52919061312f565b9050806018600501541015610c93576040517fd013fe7000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060186005016000828254610ca89190613160565b925050819055508060186004016000828254610cc49190612fb2565b9250508190555080826002016000828254610cdf9190612fb2565b92505081905550610d1d565b6040517ff721b7ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5b60008111610d59576040517fcbca5aa200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80601e6002016000828254610d6e9190612fb2565b9250508190555080826009016000828254610d899190612fb2565b925050819055508082600b016000828254610da49190612fb2565b9250508190555082817fe58b9ee1e58fdb7c85bb2c81b24351f11e5a77f2c91dc346c0444da8d47fef5e86604051610ddc9190612c13565b60405180910390a36001955050505050509392505050565b610dfc612362565b60156040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b60606000806000806000429050600f600001548110158015610e535750600f600101548111155b15610ebc5760006040518060400160405280600e81526020017f507269766174652053616c652031000000000000000000000000000000000000815250905080600f60010154601560000154601860000154600260000154965096509650965096505050611004565b600f600201548110158015610ed65750600f600301548111155b15610f3f5760006040518060400160405280600e81526020017f507269766174652053616c652032000000000000000000000000000000000000815250905080600f60030154601560010154601860020154600260010154965096509650965096505050611004565b600f600401548110158015610f595750600f600501548111155b15610fc15760006040518060400160405280600d81526020017f5075626c69632053616c65203100000000000000000000000000000000000000815250905080600f600501546015600201546018600401546002800154965096509650965096505050611004565b6000611002576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff9906131e0565b60405180910390fd5b505b9091929394565b6110136121a9565b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006110616121a9565b4282101561109b576040517f123d7a0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f600201544211156110da576040517f8834381b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600f6001018190555081600f6002018190555060016002600b546110ff91906130be565b600f6002015461110f9190612fb2565b6111199190613160565b600f600301819055506001600f600301546111349190612fb2565b600f600401819055506001600b54600f600401546111529190612fb2565b61115c9190613160565b600f6005018190555060019050919050565b6111766121a9565b602160009054906101000a900460ff16156111bd576040517ff2a5f75a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001602160006101000a81548160ff02191690831515021790555060006015600201546015600101546015600001546111f69190612fb2565b6112009190612fb2565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161126193929190613200565b6020604051808303816000875af1158015611280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a49190613091565b5050565b6000600f600301544211806112c257506000601860030154145b156112d057600190506112d5565b600090505b90565b60006112e26121a9565b6112eb82612230565b60019050919050565b6000600f6005015442118061130e57506000601860050154145b1561131c5760019050611321565b600090505b90565b6000602254421080156113445750602160009054906101000a900460ff16155b1561137b576040517faf95b1d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160080154141580156113e3575060065481600801546113e09190612fb2565b42105b1561141a576040517f2adc88c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008063020f5800600f600501546114329190612fb2565b4211156114455782600b0154915061168d565b600083600801541461145b57826008015461145f565b6022545b4261146a9190613160565b905060008084600801541480156114815750600081145b1561148f57600190506114ab565b6006548261149d919061312f565b816114a89190612fb2565b90505b600f6000015442111561154b5783600301548460000154111561154a576000606460076000015486600001546114e191906130be565b6114eb919061312f565b9050846003015485600001546115019190613160565b81111561151f578460030154856000015461151c9190613160565b90505b808560030160008282546115339190612fb2565b9250508190555080846115469190612fb2565b9350505b5b600f600201544211156115eb578360040154846001015411156115ea5760006064600760010154866001015461158191906130be565b61158b919061312f565b9050846004015485600101546115a19190613160565b8111156115bf57846004015485600101546115bc9190613160565b90505b808560040160008282546115d39190612fb2565b9250508190555080846115e69190612fb2565b9350505b5b600f6004015442111561168b5783600501548460020154111561168a5760006064600760020154866002015461162191906130be565b61162b919061312f565b9050846005015485600201546116419190613160565b81111561165f578460050154856002015461165c9190613160565b90505b808560050160008282546116739190612fb2565b9250508190555080846116869190612fb2565b9350505b5b505b8183600b015410156116a15782600b015491505b600082036116db576040517ffc559f0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8183600a0160008282546116ef9190612fb2565b925050819055508183600b01600082825461170a9190613160565b92505081905550428360080181905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611777929190613237565b6020604051808303816000875af1158015611796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ba9190613091565b5042827f903521604cced98e46dd0d6fd82d0749b760e1b73a57fd197d10e61ff641d617336040516117ec9190612c13565b60405180910390a36001935050505090565b6000600f6001015442118061181857506000601860010154145b15611826576001905061182b565b600090505b90565b611836612383565b600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061018001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b820154815250509050919050565b6119086121a9565b8051825114611943576040517f34080bf700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b82518110156119e75781818151811061196257611961613260565b5b6020026020010151600d600085848151811061198157611980613260565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050611946565b505050565b6119f46121a9565b6119fe6000612296565b565b611a086123e4565b601e6040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b611a406121a9565b602160009054906101000a900460ff1615611a87576040517ff2a5f75a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600654905090565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000611b5e6121a9565b600f60050154421015611b9d576040517f64dba6a400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84866040518363ffffffff1660e01b8152600401611bd8929190613237565b6020604051808303816000875af1158015611bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1b9190613091565b50600047118015611c295750815b15611cf5576000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051611c7690612f6e565b60006040518083038185875af1925050503d8060008114611cb3576040519150601f19603f3d011682016040523d82523d6000602084013e611cb8565b606091505b5050905080611cf3576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b60019050949350505050565b611d09612405565b60026040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b611d41612426565b60076040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b611d79612447565b60186040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481525050905090565b6000611dd16121a9565b42821015611e0b576040517f123d7a0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f60040154421115611e4a576040517f8834381b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600f6003018190555081600f600401819055506001600b54600f60040154611e739190612fb2565b611e7d9190613160565b600f6005018190555060019050919050565b6000611e996121a9565b42821015611ed3576040517f123d7a0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f60000154421115611f12576040517f8834381b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160228190555081600f600001819055506001600b54600f60000154611f389190612fb2565b611f429190613160565b600f600101819055506001600f60010154611f5d9190612fb2565b600f6002018190555060016002600b54611f7791906130be565b600f60020154611f879190612fb2565b611f919190613160565b600f600301819055506001600f60030154611fac9190612fb2565b600f600401819055506001600b54600f60040154611fca9190612fb2565b611fd49190613160565b600f6005018190555060019050919050565b6000602254905090565b611ff86121a9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361206a5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016120619190612c13565b60405180910390fd5b61207381612296565b50565b61207e61247d565b600f6040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481525050905090565b600080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561213c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612160919061331c565b50505091505060006402540be4008261217991906130be565b90506000670de0b6b3a7640000858361219291906130be565b61219c919061312f565b9050809350505050919050565b6121b161235a565b73ffffffffffffffffffffffffffffffffffffffff166121cf611acb565b73ffffffffffffffffffffffffffffffffffffffff161461222e576121f261235a565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016122259190612c13565b60405180910390fd5b565b600f6000015442111561226f576040517f8834381b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260008201518160000155602082015181600101556040820151816002015590505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60405180606001604052806000815260200160008152602001600081525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000819050919050565b6124c6816124b3565b82525050565b6060820160008201516124e260008501826124bd565b5060208201516124f560208501826124bd565b50604082015161250860408501826124bd565b50505050565b600060608201905061252360008301846124cc565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612563578082015181840152602081019050612548565b60008484015250505050565b6000601f19601f8301169050919050565b600061258b82612529565b6125958185612534565b93506125a5818560208601612545565b6125ae8161256f565b840191505092915050565b6125c2816124b3565b82525050565b600060a08201905081810360008301526125e28188612580565b90506125f160208301876125b9565b6125fe60408301866125b9565b61260b60608301856125b9565b61261860808301846125b9565b9695505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061266182612636565b9050919050565b61267181612656565b811461267c57600080fd5b50565b60008135905061268e81612668565b92915050565b6000602082840312156126aa576126a961262c565b5b60006126b88482850161267f565b91505092915050565b6126ca816124b3565b81146126d557600080fd5b50565b6000813590506126e7816126c1565b92915050565b6000602082840312156127035761270261262c565b5b6000612711848285016126d8565b91505092915050565b60008115159050919050565b61272f8161271a565b82525050565b600060208201905061274a6000830184612726565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61278d8261256f565b810181811067ffffffffffffffff821117156127ac576127ab612755565b5b80604052505050565b60006127bf612622565b90506127cb8282612784565b919050565b6000606082840312156127e6576127e5612750565b5b6127f060606127b5565b90506000612800848285016126d8565b6000830152506020612814848285016126d8565b6020830152506040612828848285016126d8565b60408301525092915050565b60006060828403121561284a5761284961262c565b5b6000612858848285016127d0565b91505092915050565b6101808201600082015161287860008501826124bd565b50602082015161288b60208501826124bd565b50604082015161289e60408501826124bd565b5060608201516128b160608501826124bd565b5060808201516128c460808501826124bd565b5060a08201516128d760a08501826124bd565b5060c08201516128ea60c08501826124bd565b5060e08201516128fd60e08501826124bd565b506101008201516129126101008501826124bd565b506101208201516129276101208501826124bd565b5061014082015161293c6101408501826124bd565b506101608201516129516101608501826124bd565b50505050565b60006101808201905061296d6000830184612861565b92915050565b600080fd5b600067ffffffffffffffff82111561299357612992612755565b5b602082029050602081019050919050565b600080fd5b60006129bc6129b784612978565b6127b5565b905080838252602082019050602084028301858111156129df576129de6129a4565b5b835b81811015612a0857806129f4888261267f565b8452602084019350506020810190506129e1565b5050509392505050565b600082601f830112612a2757612a26612973565b5b8135612a378482602086016129a9565b91505092915050565b600067ffffffffffffffff821115612a5b57612a5a612755565b5b602082029050602081019050919050565b612a758161271a565b8114612a8057600080fd5b50565b600081359050612a9281612a6c565b92915050565b6000612aab612aa684612a40565b6127b5565b90508083825260208201905060208402830185811115612ace57612acd6129a4565b5b835b81811015612af75780612ae38882612a83565b845260208401935050602081019050612ad0565b5050509392505050565b600082601f830112612b1657612b15612973565b5b8135612b26848260208601612a98565b91505092915050565b60008060408385031215612b4657612b4561262c565b5b600083013567ffffffffffffffff811115612b6457612b63612631565b5b612b7085828601612a12565b925050602083013567ffffffffffffffff811115612b9157612b90612631565b5b612b9d85828601612b01565b9150509250929050565b606082016000820151612bbd60008501826124bd565b506020820151612bd060208501826124bd565b506040820151612be360408501826124bd565b50505050565b6000606082019050612bfe6000830184612ba7565b92915050565b612c0d81612656565b82525050565b6000602082019050612c286000830184612c04565b92915050565b6000602082019050612c4360008301846125b9565b92915050565b60008060008060808587031215612c6357612c6261262c565b5b6000612c718782880161267f565b9450506020612c82878288016126d8565b9350506040612c938782880161267f565b9250506060612ca487828801612a83565b91505092959194509250565b606082016000820151612cc660008501826124bd565b506020820151612cd960208501826124bd565b506040820151612cec60408501826124bd565b50505050565b6000606082019050612d076000830184612cb0565b92915050565b606082016000820151612d2360008501826124bd565b506020820151612d3660208501826124bd565b506040820151612d4960408501826124bd565b50505050565b6000606082019050612d646000830184612d0d565b92915050565b60c082016000820151612d8060008501826124bd565b506020820151612d9360208501826124bd565b506040820151612da660408501826124bd565b506060820151612db960608501826124bd565b506080820151612dcc60808501826124bd565b5060a0820151612ddf60a08501826124bd565b50505050565b600060c082019050612dfa6000830184612d6a565b92915050565b60028110612e0d57600080fd5b50565b600081359050612e1f81612e00565b92915050565b600080600060608486031215612e3e57612e3d61262c565b5b6000612e4c86828701612e10565b9350506020612e5d868287016126d8565b9250506040612e6e8682870161267f565b9150509250925092565b60c082016000820151612e8e60008501826124bd565b506020820151612ea160208501826124bd565b506040820151612eb460408501826124bd565b506060820151612ec760608501826124bd565b506080820151612eda60808501826124bd565b5060a0820151612eed60a08501826124bd565b50505050565b600060c082019050612f086000830184612e78565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081905092915050565b50565b6000612f58600083612f3d565b9150612f6382612f48565b600082019050919050565b6000612f7982612f4b565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612fbd826124b3565b9150612fc8836124b3565b9250828201905080821115612fe057612fdf612f83565b5b92915050565b6000819050919050565b600061300b61300661300184612636565b612fe6565b612636565b9050919050565b600061301d82612ff0565b9050919050565b600061302f82613012565b9050919050565b61303f81613024565b82525050565b600060608201905061305a6000830186612c04565b6130676020830185613036565b61307460408301846125b9565b949350505050565b60008151905061308b81612a6c565b92915050565b6000602082840312156130a7576130a661262c565b5b60006130b58482850161307c565b91505092915050565b60006130c9826124b3565b91506130d4836124b3565b92508282026130e2816124b3565b915082820484148315176130f9576130f8612f83565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061313a826124b3565b9150613145836124b3565b92508261315557613154613100565b5b828204905092915050565b600061316b826124b3565b9150613176836124b3565b925082820390508181111561318e5761318d612f83565b5b92915050565b7f506c6561736520636865636b2049434f2074696d650000000000000000000000600082015250565b60006131ca601583612534565b91506131d582613194565b602082019050919050565b600060208201905081810360008301526131f9816131bd565b9050919050565b60006060820190506132156000830186612c04565b6132226020830185612c04565b61322f60408301846125b9565b949350505050565b600060408201905061324c6000830185612c04565b61325960208301846125b9565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600069ffffffffffffffffffff82169050919050565b6132ae8161328f565b81146132b957600080fd5b50565b6000815190506132cb816132a5565b92915050565b6000819050919050565b6132e4816132d1565b81146132ef57600080fd5b50565b600081519050613301816132db565b92915050565b600081519050613316816126c1565b92915050565b600080600080600060a086880312156133385761333761262c565b5b6000613346888289016132bc565b9550506020613357888289016132f2565b945050604061336888828901613307565b935050606061337988828901613307565b925050608061338a888289016132bc565b915050929550929590935056fea26469706673582212200e2bd455367d423955a46220809d53fcf11199c5cea4a2145610708f15c266f964736f6c634300081c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 32,
        "contract": "contracts/PresaleVault.sol:PresaleVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 310,
        "contract": "contracts/PresaleVault.sol:PresaleVault",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)229"
      },
      {
        "astId": 313,
        "contract": "contracts/PresaleVault.sol:PresaleVault",
        "label": "tokenPriceInUSD",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(TokenPriceInUSD)425_storage"
      },
      {
        "astId": 316,
        "contract": "contracts/PresaleVault.sol:PresaleVault",
        "label": "precision",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 318,
        "contract": "contracts/PresaleVault.sol:PresaleVault",
        "label": "minDaysBetweenClaims",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 321,
        "contract": "contracts/PresaleVault.sol:PresaleVault",
        "label": "claimPercentages",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(ClaimPercentages)432_storage"
      },
      {
        "astId": 323,
        "contract": "contracts/PresaleVault.sol:PresaleVault",
        "label": "projectWallet",
        "offset": 0,
        "slot": "10",
        "type": "t_address_payable"
      },
      {
        "astId": 325,
        "contract": "contracts/PresaleVault.sol:PresaleVault",
        "label": "roundPeriod",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 328,
        "contract": "contracts/PresaleVault.sol:PresaleVault",
        "label": "priceFeed",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(AggregatorV3Interface)273"
      },
      {
        "astId": 332,
        "contract": "contracts/PresaleVault.sol:PresaleVault",
        "label": "isAllowedStableCoin",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 337,
        "contract": "contracts/PresaleVault.sol:PresaleVault",
        "label": "userInfo",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_struct(UserInfo)411_storage)"
      },
      {
        "astId": 340,
        "contract": "contracts/PresaleVault.sol:PresaleVault",
        "label": "roundTimeInfo",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(RoundTimeInfo)366_storage"
      },
      {
        "astId": 343,
        "contract": "contracts/PresaleVault.sol:PresaleVault",
        "label": "roundHardCapInfo",
        "offset": 0,
        "slot": "21",
        "type": "t_struct(RoundHardCapInfo)373_storage"
      },
      {
        "astId": 346,
        "contract": "contracts/PresaleVault.sol:PresaleVault",
        "label": "roundTokenSaleInfo",
        "offset": 0,
        "slot": "24",
        "type": "t_struct(RoundTokenSaleInfo)386_storage"
      },
      {
        "astId": 349,
        "contract": "contracts/PresaleVault.sol:PresaleVault",
        "label": "presaleInfo",
        "offset": 0,
        "slot": "30",
        "type": "t_struct(PresaleInfo)418_storage"
      },
      {
        "astId": 351,
        "contract": "contracts/PresaleVault.sol:PresaleVault",
        "label": "isClaimEnabled",
        "offset": 0,
        "slot": "33",
        "type": "t_bool"
      },
      {
        "astId": 353,
        "contract": "contracts/PresaleVault.sol:PresaleVault",
        "label": "claimStartAt",
        "offset": 0,
        "slot": "34",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)273": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)229": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)411_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PresaleVault.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)411_storage"
      },
      "t_struct(ClaimPercentages)432_storage": {
        "encoding": "inplace",
        "label": "struct PresaleVault.ClaimPercentages",
        "members": [
          {
            "astId": 427,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "presale1",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 429,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "presale2",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 431,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "presale3",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PresaleInfo)418_storage": {
        "encoding": "inplace",
        "label": "struct PresaleVault.PresaleInfo",
        "members": [
          {
            "astId": 413,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "raisedTotalETH",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 415,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "raisedTotalSCToken",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 417,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "soldToken",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoundHardCapInfo)373_storage": {
        "encoding": "inplace",
        "label": "struct PresaleVault.RoundHardCapInfo",
        "members": [
          {
            "astId": 368,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r1HardCap",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 370,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r2HardCap",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 372,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r3HardCap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoundTimeInfo)366_storage": {
        "encoding": "inplace",
        "label": "struct PresaleVault.RoundTimeInfo",
        "members": [
          {
            "astId": 355,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r1StartTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 357,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r1EndTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 359,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r2StartTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 361,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r2EndTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 363,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r3StartTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 365,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r3EndTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoundTokenSaleInfo)386_storage": {
        "encoding": "inplace",
        "label": "struct PresaleVault.RoundTokenSaleInfo",
        "members": [
          {
            "astId": 375,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r1SoldToken",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 377,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r1TokenForSale",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 379,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r2SoldToken",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 381,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r2TokenForSale",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 383,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r3SoldToken",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 385,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r3TokenForSale",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(TokenPriceInUSD)425_storage": {
        "encoding": "inplace",
        "label": "struct PresaleVault.TokenPriceInUSD",
        "members": [
          {
            "astId": 420,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "presale1",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 422,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "presale2",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 424,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "presale3",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)411_storage": {
        "encoding": "inplace",
        "label": "struct PresaleVault.UserInfo",
        "members": [
          {
            "astId": 388,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r1Purchased",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 390,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r2Purchased",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 392,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r3Purchased",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 394,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r1Claimed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 396,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r2Claimed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 398,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "r3Claimed",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 400,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "totalSCInvested",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 402,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "totalETHInvested",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 404,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "lastClaimedAt",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 406,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "totalPurchased",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 408,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 410,
            "contract": "contracts/PresaleVault.sol:PresaleVault",
            "label": "remainToClaim",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}