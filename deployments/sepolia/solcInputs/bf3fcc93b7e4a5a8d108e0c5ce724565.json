{
  "language": "Solidity",
  "sources": {
    "contracts/SolarChain.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\ninterface IERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n}\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\nabstract contract Ownable is Context {\n    address private _owner;\n\n    error OwnableUnauthorizedAccount(address account);\n\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ncontract SolarChainICO is Ownable {\n    error RefundNotInitiated();\n    error NoTokensToClaim();\n    error NotParticipated();\n    error SoftCapNotReached();\n    error AlreadyRefunded();\n    error NotTime();\n    error SoftCapReached();\n    // error SoftCapNotReached();\n    error InvalidPrice();\n    error HardCapReached();\n    error NotEnoughSCC();\n    error AmountZero();\n    error NotInitiated();\n    error TFailed();\n    error AlreadyInitiated();\n    error InvalidTime();\n    error InvalidCap();\n    IERC20 private solarChainCoin;\n    IERC20 private paymentToken;\n\n    uint256 private tokenPrice;\n    uint256 private hardCap;\n    uint256 private softCap;\n    uint256 private startTime;\n    uint256 private endTime;\n    uint256 private totalSold;\n    bool private isInitiated;\n    bool private isSoftCapReached;\n    bool private isRefundInitiated;\n\n    struct UserInfo {\n        address user;\n        uint256 tokensPurchased;\n        uint256 tokensClaimed;\n        uint256 remainToClaim;\n        uint256 amountPaid;\n    }\n\n    mapping(address => UserInfo) private userInfo;\n\n    event ICOInitiated(uint256 tokensDeposited);\n    event TokensPurchased(\n        address indexed buyer,\n        uint256 usdtAmount,\n        uint256 tokensReceived\n    );\n\n    constructor(\n        address _coin,\n        address _pToken,\n        uint256 _tokenPrice\n    ) Ownable(msg.sender) {\n        solarChainCoin = IERC20(_coin);\n        paymentToken = IERC20(_pToken);\n        tokenPrice = _tokenPrice;\n    }\n\n    function initiateICO(\n        uint256 _amount,\n        uint256 _softCap,\n        uint256 _hardCap,\n        uint256 _startTime,\n        uint256 _endTime\n    ) external onlyOwner {\n        if (_startTime < block.timestamp) {\n            revert InvalidTime();\n        }\n        if (isInitiated) {\n            revert AlreadyInitiated();\n        }\n\n        if (_amount <= 0) {\n            revert AmountZero();\n        }\n        if (_softCap <= 0 || _hardCap <= 0) {\n            revert InvalidCap();\n        }\n        softCap = _softCap;\n        hardCap = _hardCap;\n        startTime = _startTime;\n        endTime = _endTime;\n        bool success = solarChainCoin.transferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n        if (!success) {\n            revert TFailed();\n        }\n\n        isInitiated = true;\n        emit ICOInitiated(_amount);\n    }\n\n    function buyTokens(uint256 _pTAmount) external {\n        if (!isInitiated) {\n            revert NotInitiated();\n        }\n        if (_pTAmount <= 0) {\n            revert AmountZero();\n        }\n\n        uint256 tokensToReceive = _pTAmount * tokenPrice * 10 ** 18;\n\n        if (tokensToReceive <= 0) {\n            revert AmountZero();\n        }\n\n        if (solarChainCoin.balanceOf(address(this)) < tokensToReceive) {\n            revert NotEnoughSCC();\n        }\n\n        bool pSuccess = paymentToken.transferFrom(\n            msg.sender,\n            owner(),\n            _pTAmount\n        );\n        if (!pSuccess) {\n            revert TFailed();\n        }\n        totalSold += tokensToReceive;\n\n        if (totalSold >= softCap) {\n            isSoftCapReached = true;\n        }\n        if (totalSold > hardCap) {\n            revert HardCapReached();\n        }\n        UserInfo storage user = userInfo[msg.sender];\n        if (user.user == address(0)) {\n            user.user = msg.sender;\n        }\n        user.tokensPurchased += tokensToReceive;\n        user.amountPaid += _pTAmount;\n        if (isSoftCapReached) {\n            bool tokenSuccess = solarChainCoin.transfer(\n                msg.sender,\n                tokensToReceive\n            );\n            if (!tokenSuccess) {\n                revert TFailed();\n            }\n        } else {\n            userInfo[msg.sender].remainToClaim += tokensToReceive;\n        }\n\n        emit TokensPurchased(msg.sender, _pTAmount, tokensToReceive);\n    }\n\n    function updateTokenPrice(uint256 _newPrice) external onlyOwner {\n        if (_newPrice <= 0) {\n            revert InvalidPrice();\n        }\n        tokenPrice = _newPrice;\n    }\n\n    function updateStartandEndTime(\n        uint256 _newStartTime,\n        uint256 _newEndTime\n    ) external onlyOwner {\n        startTime = _newStartTime;\n        endTime = _newEndTime;\n    }\n\n    function emergencyWithdraw(\n        address _tokenAddress,\n        uint256 _amount\n    ) external onlyOwner {\n        if (totalSold < softCap) {\n            revert SoftCapNotReached();\n        }\n        IERC20(_tokenAddress).transfer(msg.sender, _amount);\n    }\n\n    function initiateRefundPolicy() external onlyOwner {\n        if (isSoftCapReached) {\n            revert SoftCapReached();\n        }\n\n        if (block.timestamp < endTime) {\n            revert NotTime();\n        }\n        if (isRefundInitiated) {\n            revert AlreadyRefunded();\n        }\n        isRefundInitiated = true;\n    }\n\n    function claimSCCoin() external {\n        if (!isSoftCapReached) {\n            revert SoftCapNotReached();\n        }\n        UserInfo storage user = userInfo[msg.sender];\n        if (user.user == address(0)) {\n            revert NotParticipated();\n        }\n        if (user.remainToClaim <= 0) {\n            revert NoTokensToClaim();\n        }\n        uint256 tokensToClaim = user.remainToClaim;\n        user.remainToClaim = 0;\n        bool tokenSuccess = solarChainCoin.transfer(msg.sender, tokensToClaim);\n        if (!tokenSuccess) {\n            revert TFailed();\n        }\n    }\n\n    function claimPaymentToken() external {\n        if (!isRefundInitiated) {\n            revert RefundNotInitiated();\n        }\n        UserInfo storage user = userInfo[msg.sender];\n        if (user.user == address(0)) {\n            revert NotParticipated();\n        }\n        if (user.amountPaid <= 0) {\n            revert NoTokensToClaim();\n        }\n        uint256 amountToClaim = user.amountPaid;\n        user.amountPaid = 0;\n        bool tokenSuccess = paymentToken.transfer(msg.sender, amountToClaim);\n        if (!tokenSuccess) {\n            revert TFailed();\n        }\n    }\n\n    function getUserInfo(\n        address _user\n    ) external view returns (UserInfo memory) {\n        return userInfo[_user];\n    }\n\n    function getSolarChainCoin() external view returns (address) {\n        return address(solarChainCoin);\n    }\n\n    function getPaymentToken() external view returns (address) {\n        return address(paymentToken);\n    }\n\n    function getTokenPrice() external view returns (uint256) {\n        return tokenPrice;\n    }\n\n    function getHardCap() external view returns (uint256) {\n        return hardCap;\n    }\n\n    function getSoftCap() external view returns (uint256) {\n        return softCap;\n    }\n\n    function getStartTime() external view returns (uint256) {\n        return startTime;\n    }\n\n    function getEndTime() external view returns (uint256) {\n        return endTime;\n    }\n\n    function getTotalSold() external view returns (uint256) {\n        return totalSold;\n    }\n\n    function getIsInitiated() external view returns (bool) {\n        return isInitiated;\n    }\n\n    function getIsSoftCapReached() external view returns (bool) {\n        return isSoftCapReached;\n    }\n\n    function getIsRefundInitiated() external view returns (bool) {\n        return isRefundInitiated;\n    }\n}\n"
    },
    "contracts/SolarChainCoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.25;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\ninterface IERC20Errors {\r\n    error ERC20InsufficientBalance(\r\n        address sender,\r\n        uint256 balance,\r\n        uint256 needed\r\n    );\r\n\r\n    error ERC20InvalidSender(address sender);\r\n\r\n    error ERC20InvalidReceiver(address receiver);\r\n\r\n    error ERC20InsufficientAllowance(\r\n        address spender,\r\n        uint256 allowance,\r\n        uint256 needed\r\n    );\r\n\r\n    error ERC20InvalidApprover(address approver);\r\n\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\n\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\r\n    mapping(address account => uint256) private _balances;\r\n\r\n    mapping(address account => mapping(address spender => uint256))\r\n        private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 value\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        if (from == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(from, to, value);\r\n    }\r\n\r\n    function _update(address from, address to, uint256 value) internal virtual {\r\n        if (from == address(0)) {\r\n            _totalSupply += value;\r\n        } else {\r\n            uint256 fromBalance = _balances[from];\r\n            if (fromBalance < value) {\r\n                revert ERC20InsufficientBalance(from, fromBalance, value);\r\n            }\r\n            unchecked {\r\n                _balances[from] = fromBalance - value;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                _totalSupply -= value;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                _balances[to] += value;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(address(0), account, value);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        _update(account, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        _approve(owner, spender, value, true);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        bool emitEvent\r\n    ) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert ERC20InvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ERC20InvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = value;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, value);\r\n        }\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance < type(uint256).max) {\r\n            if (currentAllowance < value) {\r\n                revert ERC20InsufficientAllowance(\r\n                    spender,\r\n                    currentAllowance,\r\n                    value\r\n                );\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - value, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract SolarChainCoin is ERC20 {\r\n    constructor() ERC20(\"Solar Chain Coin\", \"SolarChain\") {\r\n        _mint(msg.sender, 1000000000000000000 * 10 ** decimals());\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}